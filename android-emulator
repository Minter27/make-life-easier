#!/bin/bash


# Helper funcions
getDevices() {
  while IFS=' ' read -ra args; do
    devices=( )
    for index in "${!args[@]}"; do
      if [[ "Name:" == "${args[index]}" ]]; then
        devices+=("${args[index+1]}")
      fi
    done
    echo ${devices[@]}
  done <<< $(sh -c "$listAvd")
}

isDeviceValid() {
  devices=$(getDevices)
  while IFS=' ' read -ra devices; do
    for device in "${devices[@]}"; do
      echo $device
      if [[ $1 == $device ]]; then
        return 0
      fi
    done
  done <<< $(getDevices)
  return 1
}

pp_Devices() {
  while IFS=' ' read -ra devices; do
    for device in "${devices[@]}"; do
      echo "-  $device"
    done
  done <<< $(getDevices)
}

# OS check
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  binPath=~/Android/Sdk/tools/bin
  # Android Studio Version Check
  if [[ ! -d "~/Android/Sdk/tools" ]]; then
    # @^3.2
    emuPath=~/Android/Sdk/emulator
  else
    emuPath=~/Android/Sdk/tools
  fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
  binPath=~/Library/Android/Sdk/tools/bin
  emuPath=~/Library/Android/Sdk/tools
else 
  echo "Script is unable to run, incompative operating system. Quitting ...."
  exit 1
fi

# Constant
listAvd="$binPath/avdmanager list avd"

# Arguments guidance
if [[ $1 == "show" ]]; then
  pp_Devices
elif [[ $1 == "run" ]]; then
  if isDeviceValid "$2"; then
    $emuPath/emulator -avd $2
  else
    echo "The device name is invalid. To see the devices you have installed, run android-emulator show"
  fi
else
  pp_Devices
  read -r -p "Your device: " device
  $emuPath/emulator -avd $device
fi